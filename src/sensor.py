from uuid import uuid4
from .gateway import Gateway
from .helpers import logger as app_logger


class Sensor:
    """Generates a sensor object

    Attributes:
        measurement (int): value generated by sensor
        sensor_type (str): type of sensor for example humidity sensor
        measurement_unit (str): standard unit of measurement for example percentage
        sensor_id (str): identity of the device as UUID
    """
    def __init__(self,
                 measurement=0,
                 sensor_type='temperature',
                 measurement_unit='degrees_celsius',
                 sensor_id=uuid4()):
        self.__measurement = measurement
        self.__sensor_type = sensor_type
        self.__measurement_unit = measurement_unit
        self.__sensor_id = sensor_id

    def get_sensor_payload(self):
        """Builds sensor message payload

        Returns:
            obj: a json object of the sensor data
        """

        try:
            sensor_payload = {'sensor_id': str(self.__sensor_id),
                              'sensor_type': self.__sensor_type,
                              'sensor_measurement_unit': self.__measurement_unit,
                              'sensor_measurement': self.__measurement
                              }
            app_logger.info("Generation of sensor payload!")
            return sensor_payload
        except Exception as e:
            app_logger.error(str(e))

    def post_payload(self):
        """Sends sensor data to gateway
        """
        try:
            payload = self.get_sensor_payload()
            gw = Gateway(message_payload=payload)
            app_logger.info("Connecting to broker")
            gw.connect_to_broker()
        except Exception as e:
            app_logger.error(str(e))
